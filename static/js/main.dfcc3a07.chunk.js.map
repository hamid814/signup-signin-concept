{"version":3,"sources":["serviceWorker.js","context/Context.js","components/Layer.js","components/layout/Container.js","components/layout/Header.js","context/Reducer.js","context/State.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Context","createContext","Layer","useContext","setState","id","className","onClick","Container","Header","action","type","payload","State","props","useReducer","Reducer","dispatch","Provider","value","children","App","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qUAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC9FjE,IAEeC,EAFCC,0BC2CDC,G,MAvCD,WAAO,IAAD,EACUC,qBAAWH,GAA/BR,EADU,EACVA,MAAOY,EADG,EACHA,SAQf,OACE,yBAAKC,GAAG,QAAQC,UAAS,UAAKd,IAC5B,yBAAKc,UAAU,cACb,yBAAKA,UAAU,oBAGf,yBAAKA,UAAU,oBAGf,yBAAKA,UAAU,iBAGf,yBAAKA,UAAU,kBAIjB,4BAAQC,QAtBU,WAEhBH,EADM,WAAVZ,EACa,SACA,WAmBqBc,UAAS,UAAKd,IAEhC,WAAVA,GACK,UAGK,WAAVA,GACK,cCxBAgB,G,MARG,WAChB,OACE,yBAAKH,GAAG,iBACN,kBAAC,EAAD,SCCSI,EARA,WACb,OACE,yBAAKJ,GAAG,cAAR,mB,cCJW,WAACb,EAAOkB,GACrB,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,eACFnB,EADL,CAEEA,MAAOkB,EAAOE,UAElB,QACE,OAAOpB,ICwBEqB,EA5BD,SAAAC,GACZ,IADqB,EAMKC,qBAAWC,EALhB,CAEnBxB,MAAO,WAHY,mBAMdA,EANc,KAMPyB,EANO,KAgBrB,OACE,kBAAC,EAAQC,SAAT,CACEC,MAAO,CACL3B,MAAOA,EAAMA,MACbY,SAXW,SAACZ,GAChByB,EAAS,CACPN,KAAM,YACNC,QAASpB,OAWRsB,EAAMM,W,wBCbb,SAASC,IACP,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAaNC,IAASC,OAAO,mBARO,WACrB,OACE,kBAAC,EAAD,KACE,kBAACF,EAAD,SAKU,MAAoBG,SAASC,eAAe,SPTrD,SAAkB3C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI2C,IAAIC,0BAAwBnD,OAAOC,SAASmD,MACpDC,SAAWrD,OAAOC,SAASoD,OAIvC,OAGFrD,OAAOsD,iBAAiB,QAAQ,WAC9B,IAAMjD,EAAK,UAAM8C,0BAAN,sBAEPrD,IAgEV,SAAiCO,EAAOC,GAEtCiD,MAAMlD,EAAO,CACXmD,QAAS,CAAE,iBAAkB,YAE5B9C,MAAK,SAAA+C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtD,UAAUC,cAAcsD,MAAMpD,MAAK,SAAAC,GACjCA,EAAaoD,aAAarD,MAAK,WAC7BV,OAAOC,SAAS+D,eAKpB5D,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA8C,CAAwB5D,EAAOC,GAI/BC,UAAUC,cAAcsD,MAAMpD,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OOd/BE,K","file":"static/js/main.dfcc3a07.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createContext } from 'react';\r\n\r\nconst Context = createContext();\r\n\r\nexport default Context;\r\n","import React, { useContext } from 'react'\r\n\r\nimport Context from '../context/Context'; \r\n\r\nimport './layer.css';\r\n\r\nconst Layer = () => {\r\n  const { state, setState } = useContext(Context)\r\n\r\n  const onbuttonClick = () => {\r\n    state === 'signin'\r\n      ? setState('signup')\r\n      : setState('signin')\r\n  }\r\n\r\n  return (\r\n    <div id='layer' className={`${state}`}>\r\n      <div className='background'>\r\n        <div className='shape triangle1'>\r\n\r\n        </div>\r\n        <div className='shape triangle2'>\r\n\r\n        </div>\r\n        <div className='shape circle'>\r\n\r\n        </div>\r\n        <div className='shape square'>\r\n\r\n        </div>\r\n      </div>\r\n      <button onClick={onbuttonClick} className={`${state}`}>\r\n        {\r\n          state === 'signin'\r\n            && 'sign up'\r\n        }\r\n        {\r\n          state === 'signup'\r\n            && 'sign in'\r\n        }\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layer\r\n","import React from 'react'\r\n\r\nimport Layer from '../Layer';\r\n\r\nimport './container.css';\r\n\r\nconst Container = () => {\r\n  return (\r\n    <div id='app-container'>\r\n      <Layer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Container\r\n","import React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div id='app-header'>\r\n      idea from .//.\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'set-state':\r\n      return {\r\n        ...state,\r\n        state: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer } from 'react';\r\nimport Context from './Context';\r\nimport Reducer from './Reducer';\r\n\r\nconst State = props => {\r\n  const initialState = {\r\n    // state: 'signin',\r\n    state: 'signup',\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n\r\n  // Get todos\r\n  const setState = (state) => {\r\n    dispatch({\r\n      type: 'set-state',\r\n      payload: state\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        state: state.state,\r\n        setState,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default State;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Container from './components/layout/Container';\nimport Header from './components/layout/Header';\n\nimport State from './context/State';\n\nimport './index.css';\nimport './styles/zindex.css';\nimport './styles/keyframes.css';\nimport './styles/testSass.scss';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Container />\n    </>\n  );\n}\n\nconst StateContainer = () => {\n  return (\n    <State>\n      <App />\n    </State>\n  )\n}\n\nReactDOM.render(<StateContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}